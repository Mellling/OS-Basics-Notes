//////////////////////////////////////////////////////////
// [멀티프로세스와 멀티스레드]
//////////////////////////////////////////////////////////

// 여러 프로세스를 동시에 실행하는 것을 멀티프로세스, 여러 스레드를 동시에 실행하는 것을 멀티스레드라 한다.


// 여러 프로세스로 병행하여 실행하는 것과 여러 스레드로 병행하여 실행하는 것의 큰 차이는 바로 프로세스끼리는 기본적으로 자원을 공유하지 않지만, 스레드끼리는 같은 프로세스 내에서 자원을 공유한다는 것이다.

// 프로세스를 fork하여 같은 작업을 하는 동일한 프로세스 두 개를 동시에 실행하면 코드 영역, 데이터 영역, 힙 영역 등을 비롯한 모든 자원이 복제되어 메모리에 적재된다.→ 메모리 낭비.

// 이에 반해 스레드는 각기 다른 스레드 ID, 프로그램 카운터 값을 포함한 레지스터 값, 스택을 가질 뿐 아니라 프로세스가 가지고 있는 자원을 공유한다.

// 즉, 같은 프로세스 내의 모든 스레드는 동일한 주소 공간의 코드, 데이터, 힙 영역을 공유하고, 열린 파일과 같은 프로세스 자원을 공유할 수 있다.→ 메모리 효율적.

// 또한 서로 다른 프로세스들은 기본적으로 자원을 공유하지 않기 때문에 서로 독립적으로 실행되는 반면, 스레드는 프로세스의 자원을 공유하기 때문에 협력과 통신에 유리하다.

// 프로세스의 자원을 공유한다는 특성은 때로 단점이 되기도 하는데, 멀티프로세스 환경에서는 하나의 프로세스에 문제가 생겨도 다른 프로세스에 지장이 적거나 없지만, 멀티스레드 환경에서는 하나의 스레드에 문제가 생기면 프로세스 전체에 문제가 생길 수 있다.

//////////////////////////////////////////////////////////

// 프로세스 간 통신 ////////////////////////////////////////

// 프로세스 간의 자원을 공유하고 데이터를 주고받는 것을 프로세스 간 통신(IPC)라 한다.

// 같은 컴퓨터 내의 서로 다른 프로세스나 스레드끼리 데이터를 주고받는 것도 통신으로 간주한다.

// 프로세스들은 파일 속 데이터를 주고받으므로 통신하기도 하는데 이를 파일을 통한 프로세스 간 통신이라 한다.

// 또한 프로세스들이 서로 공유하는 메모리 영역을 두어 데이터를 주고받는 통신이 있는데, 여기서 프로세스들이 공유할 수 있는 메모리 영역을 공유 메모리라 한다.

// 이처럼 프로세스들끼리 데이터 교환하는 것은 모든 자원을 공유하고 있는 스레드에 비해 다소 까다롭지만 불가능한 것은 아니다.