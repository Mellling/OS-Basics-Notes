//////////////////////////////////////////////////////////
// [동기화 기법]
//////////////////////////////////////////////////////////

// [ 뮤텍스 락 ] //////////////////////////////////////////

// 옷 가게에 탈의실과 손님들이 있다 가정해보자.이때 여기서 손님은 프로세스, 탈의실은 임계 구역이라 할 수 있다.

// 만약 탈의실에 자물쇠가 있다면 탈의실 밖에 있는 사람은 해당 자물쇠의 유무를 가지고 현재 탈의실에 사람이 있는지 없는지 판단할 수 있을 것이다.

// 이 자물쇠 기능을 구현한 것이 뮤텍스 락이다.뮤텍스 락은 동시에 접근해서는 안 되는 자원을 동시에 접근하지 않도록 만드는 도구, 즉 상호 배제를 위한 도구이다.

// 뮤텍스 락은 매우 단순한 형태로 하나의 전역 변수와 두 개의 함수로 구현할 수 있다.

// - 자물쇠 역할 : 프로세스들이 공유하는 전역 변수 lock
// 
//  - 임계 구역을 잠그는 역할 : acquire 함수
//      - 프로세스가 임계 구역에 진입하기 전에 호출하는 함수이다.
//      - 임계 구역이 잠겨 있다면 임계 구역이 열릴 때까지(lock가 false) 임계 구역을 반복적으로 확인한다.← 이러한 대기 방식을 바쁜 대기라 한다.
//      - 임계 구역이 열려 있다면 임계 구역을 잠그는(lock를 true로) 함수이다.
// 
// - 임계 구역의 잠금을 해제하는 역할 : release 함수
//      - 임계 구역에서 작업이 끝나고 호출하는 함수이다.
//      - 현재 잠긴 구역을 열어주는(lock를 false로) 함수이다.

// acquire와 release 함수는 임계 구역 전후로 호출함으로써 하나의 프로세스만 임계 구역에 진입할 수 있다.

//////////////////////////////////////////////////////////

// ## 세마포

// 세마포는 뮤텍스 락과 비슷하지만, 조금 더 일반화된 동기화 도구이다.

// 뮤텍스 락은 하나의 공유 자원에 접근하는 프로세스를 상정한 방식이다.

// 하지만 공유 자원이 여러 개 있을 경우(각 공유 자원에 하나의 프로세스만 진입이 가능할지라도) 여러 개의 프로세스가 각각 공유 자원에 접근이 가능해진다.

// 세마포는 공유 자원이 여러 개 있는 상황에서도 적용이 가능한 동기화 도구이다.

// 세마포는 멈춤 신호와 가도 좋다는 신호로서 임계 구역을 관리한다.즉, 프로세스는 임계 구역 앞에서 멈춤 신호를 받으면 잠시 기다리고, 가도 좋다는 신호를 받으면 그제서야 임계 구역에 들어가게 된다.


// 세마포는 하나의 변수와 두 개의 함수로 단순하게 구현할 수 있다.

// - 임계 구역에 진입할 수 있는 프로세스(사용 가능한 공유 자원의 개수)를 나타내는 전역 변수 S
// - 임계 구역에 들어가도 좋은지, 기다려야 하는지 알려주는 함수 wait 함수
// - 임계 구역 앞에서 기다리는 프로세스에 이제 가도 좋다고 신호를 주는 signal 함수

// 세마포도 임계 구역 진입 전후로 wait 함수와 signal 함수를 호출한다.

// ## 세마포 구현 ///////////////////////////////////////////

// wait 함수
// -만일 임계 구역에 진입할 수 있는 프로세스의 개수가 0 이하라면, 사용할 수 있는 자원이 있을 때까지 반복적으로 확인한다.
// - 임계 구역에 진입할 수 있는 자원의 개수가 하나 이상이라면 S를 1 감소시키고 임계 구역으로 진입한다.

// signal 함수
// -임계 구역에서의 작업을 마친 뒤 S를 1 증가시키는 함수이다.

//////////////////////////////////////////////////////////

// ## 바쁜 대기 문제 해결 ///////////////////////////////////
// 
// 사용할 수 있는 공유 자원이 없는 경우 프로세스가 무작정 무한히 반복하며 S를 확인해야 한다.이러한 방법은 CPU 주기를 낭비한다는 점에서 손해이다.

// 그렇기 때문에 세마포는 다른 더 좋은 방법을 사용한다.

// wait 함수는 만일 사용할 수 있는 데이터가 없을 경우 해당 프로세스를 대기 상태로 만들고, 그 프로세스의 PCB를 세마포를 위한 대기 큐에 집어넣는다.

// 다른 프로세스가 임계 구역에서의 작업을 끝내고 signal 함수를 호출하면 대기 중인 프로세스를 대기 큐에서 제거하고, 프로세스 상태를 준비 상태로 변경한 뒤 준비 큐로 옮겨준다.


// ## 세마포를 이용한 프로세스의 실행 순서 동기화

// 세마포의 변수 S를 0으로 두고 먼저 실행한 프로세스 뒤에 signal  함수, 다음에 실행할 프로세스 앞에 wait 함수를 붙이면 세마포를 이용하여 프로세스의 순서 동기화를 할 수 있다.

//////////////////////////////////////////////////////////

// [ 모니터 ] /////////////////////////////////////////////

// 모니터는 세마포에 비해 사용자가 사용하기 훨씬 편한 도구로, 실행 순서 제어를 위한 동기화, 상호 배제를 위한 동기화 모두 제공해주는 동기화 도구입니다.

// 모니터는 공유 자원과 공유 자원에 접근하기 위한 인터페이스(통로)를 묶어 관리한다.그리고 프로세스는 반드시 인터페이스를 통해서만 공유 자원에 접근할 수 있다.

// 이를 위해 모니터는 통해 공유 자원에 접근하고자 하는 프로세스를 큐에 삽입하고, 큐에 삽입된 순서대로 하나씩 공유 자원을 이용하도록 한다.

// 즉, 모니터는 공유 자원을 다루는 인터페이스에 접근하기 위한 큐를 만들고, 모니터 안에 항상 하나의 프로세스만 들어오도록 하여 상호 배제를 위한 동기화를 제공한다.

//////////////////////////////////////////////////////////

// 이 밖에도 모니터는 실행 순서 제어를 위한 동기화를 제공한다.

// 특정 조건을 바탕으로 프로세스를 실행하고 일시 중단하기 위해 모니터는 조건 변수를 사용하는데, 조건 변수는 프로세스나 스레드의 실행 순서를 제어하기 위해 사용하는 특별한 변수이다.*

// * 모니터가 조건 변수를 사용한다고 하지만 조건 변수와 모니터는 별개의 개념이다.

// 조건 변수로는 wait 연산과 signal 연산을 수행할 수 있다.

// 우선 wait는 호출한 프로세스의 상태를 대기 상태로 전환하고 일시적으로 조건 변수에 대한 대기 큐로 삽입하는 연산이다.

// 여기서 모니터로 진입하기 위해 삽입되는 큐와 wait 호출되어 실행이 중단된 프로세스들이 삽입되는 큐는 다르다.

// wait 연산으로 일시 중지된 프로세스는 다른 프로세스의 signal 연산을 통해 실행이 재개될 수 있다.

// 즉, signal 연산은 wait를 호출하여 큐에 삽입된 프로세스의 실행을 재개하는 연산이다.