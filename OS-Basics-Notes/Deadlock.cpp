//////////////////////////////////////////////////////////
// [교착 상태]
//////////////////////////////////////////////////////////

// 프로세스를 실행하기 위해서는 자원이 필요한데, 두 개 이상의 프로세스가 각자 가지고 있는 자원을 무작정 기다리면 그 어떤 프로세스도 더 이상 진행할 수 없는 교착 상태가 된다.

// [ 식사하는 철학자 문제 ] /////////////////////////////////

// 식사하는 철학자 문제는 교착 상태를 설명하기 위한 상황이다.

// 모든 철학자가 식사를 하면 어떤 철학자도 식사를 할 수 없고 영원히 생각을 해야 한다.모든 철학자가 왼쪽 포크를 집어 들면 모두가 오른쪽 포크를 집어 들 수 없기 때문이다.

// 즉, 모든 철학자가 다른 철학자가 포크를 내려놓을 때까지 기다린다.

// 이렇게 일어나지 않을 사건을 기다리며 진행이 멈춰 버리는 현상을 교착 현상(deadlock)이라 한다.

// 교착 상태를 해결하기 위해서는 1) 교착 상태가 발생했을 때의 상황을 정확히 표현해 보고, 2) 교착 상태가 일어나는 근본적인 이유에 대해 알아야 한다.

//////////////////////////////////////////////////////////

// [ 자원 할당 문제 ] //////////////////////////////////////

// 자원 할당 그래프란 어떤 프로세스가 어떤 자원을 사용하고 있고, 또 어떤 프로세스가 어떤 자원을 기다리고 있는지를 표현한 간단한 그래프이다.교착 상태는 자원 할당 그래프를 통해 표현할 수 있다.

// 자원 할당 그래프는 아래와 같은 규칙으로 그린다.

// 1. 프로세스는 원으로, 자원의 종류는 사각형으로 그린다.
// 2. 사용할 수 있는 자원의 개수는 자원 사각형 내에 점으로 표현한다.
// 3. 프로세스가 어떤 자원을 할당받아 사용 중이라면 자원에서 프로세스를 향해 화살표를 그린다.
// 4. 프로세스가 어떤 자원을 기다리고 있다면 프로세스에서 자원으로 화살표를 표시한다.

// 식사하는 철학자 문제를 자원 할당 그래프로 표현해 보면 원의 형태를 띄고 있다.

// 교착 상태가 발생한 상황은 자원 할당 그래프가 원의 형태를 띄고 있다.

//////////////////////////////////////////////////////////

// [ 교착 상태 발생 조건 ] //////////////////////////////////

// 교착 상태가 발생하는 조건에는 상호 배제, 점유와 대기, 비선점, 원형 대기가 있다.

// 해당 조건이 모두 충족됐을 때만 교착 상태가 발생할  가능성이 생긴다.
 
// ##  상호 배제 ///////////////////////////////////////////
// 
// 교착 상태가 발생한 근본적인 원인은 해당 자원을 한 번에 하나의 프로세스만 이용 가능했기 때문이다.
// 
// 즉, 한 프로세스가 사용하는 자원을 다른 프로세스가 사용할 수 없을 때, 상호 배제 상황일 때 교착 상태가 발생할 수 있다.


// ## 점유와 대기 ///////////////////////////////////////////
 
// 식사하는 철학자의 문제에서 자원인 포크를 보유한 채 다른 자원을 기다렸기 때문에 문제가 발생했다.
// 이렇게 자원을 할당 받은 상태에서 다른 자원을 할당 받기를 기다리는 상태를 점유와 대기라 한다.


// ## 비선점 ////////////////////////////////////////////////

// 교착 상태가 발생하게 된 또 하나의 근본적인 문제는 프로세스가 자원을 비선점하고 있기 때문이다.
// 어떤 프로세스도 다른 프로세스의 자원을 강제로 빼앗지 못했기 때문에 교착 상태가 발생했다 볼 수 있다.


// ## 원형 대기 /////////////////////////////////////////////

// 프로세스들과 프로세스가 요청 및 할당 받은 자원이 원의 형태를 이루었기 때문에 교착 상태가 발생했다 볼 수 있다.*
// 이렇게 프로세스들이 원의 형태로 자원을 대기하는 것을 원형 대기라 한다.
// * 자원 할당 그래프가 원의 형태를 띈다고 해서 반드시 교착 상태가 발생하는 것은 아니다.