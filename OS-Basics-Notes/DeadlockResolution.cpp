//////////////////////////////////////////////////////////
// [교착 상태]
//////////////////////////////////////////////////////////

// [ 교착 상태 예방 ] //////////////////////////////////////

// 교착 상태 예방하는 방법은 교착 상태 발생 필요 조건 네 가지 중 하나를 충족하지 못하게 하는 방법과 같다.

// ## 자원의 상호 배제를 없애 보자 ///////////////////////////

// 자원의 상호 배제를 없앤다는 말의 의미는 모든 자원을 공유 가능하게 만든다는 말과 같다.

// 이론적으로는 교착 상태를 없앨 수 있으나, 현실적으로 모든 자원의 상호 배제를 없앨 수 없다.
//////////////////////////////////////////////////////////

// ## 점유와 대기를 없애 보자 ///////////////////////////////

// 점유와 대기를 없애면 운영체제는 특정 프로세스에 자원을 모두 할당하거나, 아예 할당하지 않는 방식으로 배분한다.

// 해당 방식은 자원이 당장 필요해도 기다릴 수밖에 없는 프로세스와 오랫동안 할당되는 자원을 다수 양산하기 때문에 자원의 활용률이 낮아진다.

// 게다가 점유와 대기를 금지하면 많은 자원을 사용하는 프로세스가 무한정 기다리게 되는 기아 현상을 야기할 우려가 있다.
//////////////////////////////////////////////////////////

// ## 비선점 조건을 없애 보자 ///////////////////////////////

// 선점하여 사용할 수 있는 일부 자원에 대해서는 효과적이다.허나 모든 자원이 이렇게 선점 가능한 것은 아니다.

// 예를 들어 어떤 프로세스가 한 번에 한 프로세스만 이용할 수 있는 프린터를 이용하는 도중에 다른 프로세스가 프린터 자원을 빼앗아 사용하기란 어렵다.

// 따라서 비선점 조건을 없애 모든 자원을 빼앗을 수 있도록 하여 교착 상태를 예방하는 방법은 다소 범용성이 떨어지는 방식이다.
//////////////////////////////////////////////////////////

// ## 원형 대기 조건을 없애 보자 ////////////////////////////

// 모든 자원에 번호를 붙이고, 오름차순으로 자원을 할당하면 원형 대기는 발생하지 않는다.

// 해당 방법은 다른 교착 상태를 예방하는 방식에 비하면 비교적 현실적이고 실용적인 방식이다.

// 하지만 모든 컴퓨터 시스템 내에 존재하는 수많은 자원에 번호를 할당하는 것은 그리 쉬운 일이 아니며, 각 자원에 어떤 번호를 붙이는지에 따라 특정 자원의 활용률이 떨어질 수 있다.

//////////////////////////////////////////////////////////

// [ 교착 상태 회피 ] //////////////////////////////////////

// 교착 상태 회피는 교착 상태가 발생하지 않을 정도로만 조심하여 자원을 할당하는 방식이다.

// 교착 상태 회피 방식에서는 교착 상태를 한정된 자원이 무분별한 할당으로 인해 발생하는 문제로 간주한다.

// 교착 상태 회피하는 방식을 알기 위해서는 안전 상태와 불완전 상태, 그리고 안전 순서열을 알아야 한다.

// - 안전 상태
//		- 교착 상태가 발생하지 않고 모든 프로세스가 정상적으로 자원을 할당 받고 종료될 수 있는 상태를 의미한다.
//		 - 안전 순서열대로 프로세스들이 자원을 배분하여 교착 상태가 발생하지 않은 상태를 안전 상태라 한다.

// - 불완전 상태
//		- 교착 상태가 발생할 수 있는 상황을 의미한다.
//		- 안전 순서열이 없는 상황이다.

// - 완전 순서열
//		- 교착 상태 없이 안전하게 프로세스들이 자원을 할당할 수 있는 순서를 의미한다.

// 운영체제가 교착 상태를 회피하기 위해서는 시스템 상태가 안전 상태에서 안전 상태로 움직이는 경우에만 자원을 할당하면 된다.

// 즉, 교착 상태 회피 방식은 항시 안전 상태를 유지하도록 자원을 분배하는 방식이다.

//////////////////////////////////////////////////////////

// [ 교착 상태 검출 후 회복 ] ///////////////////////////////

// 교착 상태 검출 후 회복은 교차 상태가 발생을 인정하고 사후에 조치하는 방식이다.

// 검출 후 회복 방식에서 운영체제는 프로세스들이 자원을 요구할 때마다 그때그때 모두 할당하며, 교착 상태 발생 여부를 주기적으로 검사한다.그리고 교착 상태가 발생하면 비로소 회복한다.

// 교착 상태 회복 방식은 다음과 같다.

// - 선점을 통한 회복
//		- 교착 상태가 해결될 때까지 한 프로세스씩 자원을 몰아주는 방식이다.
//		- 교착 상태가 해결될 때까지 다른 프로세스로부터 자원을 강제로 빼앗고 한 프로세스에 할당하는 방식이다.

// - 프로세스 강제 종료를 통한 회복
//		- 가장 단순하고 확실한 방법이다.
//		- 운영체제는 교착 상태에 놓인 프로세스를 모두 강제 종료할 수 있고, 교착 상태가 없어질 때까지 한 프로세스씩 강제 종료할 수도 있다.
//		- 전자가 가장 확실한 방식이지만 그만큼 많은 프로세스들이 작업 내역을 잃을 가능성이 있다.
//		- 후자는 작업 내역을 잃는 프로세스는 확실히 줄일 수 있지만 교착 상태가 없어졌는지 확인하는 과정에서 오버헤드를 야기한다.

// 이 세가지 방법 외에 교착 상태를 아예 무시하는 방법도 있다.
// 드물게 발생하는 잠재적 문제를 무시로 대처하는 방식으로 타조 알고리즘이라는 방식이 있다.