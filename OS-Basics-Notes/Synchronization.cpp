//////////////////////////////////////////////////////////
// [동기화란]
//////////////////////////////////////////////////////////

// [ 동기화의 의미 ] ///////////////////////////////////////

// 동시다발적으로 실행되는 많은 프로세스는 서로 데이터를 주고받으며 협력하며 실행될 수 있다.이렇게 협력적으로 실행되는 프로세스들은 올바른 실행을 위해 동기화가 필요하다.

// 프로세스 동기화란 프로세스들 사이의 수행 시기를 맞추는 것을 의미한다.

// 프로세스의 수행 시기를 맞추는 것은 아래 두 가지를 일컫는다.

// - 실행 순서 제어
//      - 프로세스를 올바른 순서대로 실행하기
// - 상호 배제
//      - 동시에 접근하면 안 되는 자원에 하나의 프로세스만 접근하기

// * 프로세스뿐만 아니라 스레드도 동기화의 대상이다.정확히 말하면 실행의 흐름을 갖는 모든 것이 동기화의 대상이다.

//////////////////////////////////////////////////////////

// ## 실행 순서 제어를 위한 동기화 ///////////////////////////

// 가령 Writer라는 프로세스와 Reader라는 프로세스가 동시에 실행 중이라 가정해보자.이때 Writer 프로세스는 Book.txt 파일에 값을 저장하는, Reader 프로세스는 Book.txt 파일의 값을 읽어오는 프로세스이다.

// 이 두 프로세스가 무작정 아무 순서대로 실행되어서는 안 된다.Reader 프로세스는 Writer 프로세스 실행이 끝난 뒤에 비로서 실행될 수 있기 때문이다.

// 다시 말해 Reader 프로세스는 Book.txt 안에 값이 존재한다는 특정 조건이 만족되어야만 실행을 이어나갈 수 있다.

// 이렇게 동시에 실행되는 프로세스는 올바른 순서대로 실행하는 것이 첫 번째 프로세스 동기화이다.

//////////////////////////////////////////////////////////

// ## 상호 배제를 위한 동기화 ///////////////////////////////

// 상호 배제는 공유가 불가능한 자원의 동시 사용을 피하기 위해 사용하는 알고리즘이다.

// 가령 계좌에 10만원이 저축되어 있다 가정해보자.그리고 프로세스 A는 현재 저축 금액에 2만원을 넣는 프로세스, 프로세스 B는 현재 저축 금액에 5만원을 넣는 프로세스라 가정해보자.

// 이때 프로세스 A와 프로세스 B를 동시에 실행되었다 가정해볼 때, 실행 결과로 계좌에 17만원이 남는 것을 기대해볼 수 있다.

// 그러나 동기화가 제대로 이루어져 있지 않을 경우 계좌에 15만원이 남는 엉뚱한 결과가 나올 수 있다.이는 A와 B가 잔액이라는 데이터를 동시에 사용하는데, A가 끝나기도 전에 B가 잔액을 읽어 버렸기 때문에 발생하는 문제이다.

// 이렇게 동시에 접근해서는 안 되는 자원에 동시에 접근하지 못하게 하는 것이 상호 배제를 위한 동기화이다.

//////////////////////////////////////////////////////////

// [ 생산자와 소비자 문제 ] /////////////////////////////////

// 상호 배제를 위한 동기화 문제와 관련하여 고전적이고 유명한 문제로 생산자와 소비자 문제가 있다.

// 생산자와 소비자 문제는 물건을 계속해서 생산하는 프로세스인 생산자와 물건을 계속해서 소비하는 프로세스인 소비자로 이루어져 있다.*

// * 생산자와 소비자는 동시에 실행되는 스레드가 될 수도 있다.

// 아래와 같은 생산자와 소비자가 총합이라는 데이터를 공유하고 있다 해보자.

// --------------------------------------------------------
/*
// 생산자
생산자()
{
    버퍼에 데이터 삽입
        '총합' 변수 1 증가
}

// 소비자
소비자()
{
    버퍼에 데이터 빼내기
        '총합' 변수 1 감소
}
*/
// --------------------------------------------------------

// 이때 총합 변수의 초기값이 10이라 가정해보자.이러한 상황에서 생산자를 100000번, 소비자를 100000번 실행했다 하자.총합 변수가 계속 10이길 기대해볼 수 있으나, 실제로는 예상치 못한 결과일 수 있다.

// 이는 생산자 프로세스와 소비자 프로세스가 제대로 동기화되지 않았기 때문에 발생하는 문제이다.총합이라는 데이터를 동시에 사용하는데 각 프로세스가 서로의 작업이 끝나기도 전에 총합을 수정했기 때문이다.

//////////////////////////////////////////////////////////

// [ 공유 자원과 임계 구역 ] ////////////////////////////////

// 공유 자원은 전역 변수가 될 수도 있고, 파일이 될 수도 있고, 입출력장치, 보조기억장치가 될 수도 있다.

// 공유 자원 중 두 개 이상의 프로세스를 동시에 실행하면 문제가 발생하는 자원이 있다.

// 이렇게 동시에 실행하면 문제가 발생하는 자원에 접근하려는 코드 영역을 임계 구역이라 한다.

// 두 개 이상의 프로세스가 임계 구역에 진입하고자 하면 둘 중 하나는 대기해야 한다.

// 임계 구역은 두 개 이상의 프로세스가 동시에 실행되면 안 되는 영역이지만, 잘못된 실행으로 인해 여러 프로세스가 동시 다발적으로 임계 구역의 코드를 실행하여 문제가 발생하는 경우도 있다.이를 레이스 컨디션이라 한다.

// 컴퓨터는 고급 언어가 아닌 저급 언어를 실행하기 때문에 여러 줄의 저급 언어로 변환된 고급 언어를 한 줄 실행하는 과정에서 문맥 교환이 일어날 수도 있다.

// 운영체제는 이러한 임계 구역 문제를 아래 세 가지 원칙 하에 해결한다. (상호 배제를 위한 동기화를 위해선 아래 세 가지를 반드시 지켜야 한다)

// - 상호 배제
//       - 한 프로세스가 임계 구역에 진입했다면 다른 프로세스는 임계 구역에 들어올 수 없다.
// - 진행
//      - 임계 구역에 어떤 프로세스도 진입하지 않았다면 임계 구역에 진입하고자 하는 프로세스는 들어갈 수 있어야 한다.
// - 유한 대기
//      - 한 프로세스가 임계 구역에 진입하고 싶다면 그 프로세스는 언젠가 임계 구역에 들어올 수 있어야 한다. (무한정 대기해서는 안 된다)