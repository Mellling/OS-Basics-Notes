//////////////////////////////////////////////////////////
// [프로세스 상태와 계층 구조]
//////////////////////////////////////////////////////////

// [ 프로세스 상태 ] ///////////////////////////////////////

// - 생성 상태
//		- 프로세스를 생성 중인 상태를 생성 상태로, 이제 막 메모리에 적재되어 PCB를 할당 받은 상태이다.
// - 준비 상태
//		- 준비 상태라 당장이라도 CPU를 할당받아 실행할 수 있지만, 아직 자신의 상태가 아니라 대기 중인 상태이다.
// - 실행 상태
//		- CPU를 할당받아 실행 중인 프로세스를 의미한다.
// - 대기 상태
//		- 입출력장치의 작업을 기다리는 상태를 대기 상태라 한다.
// - 종료 상태
//		- 프로세스가 종료된 상태를 의미한다.

// 프로세스가 실행되는 동안 이동하는 상태(생성, 준비, 실행, 대기, 종료 등)와 상태 전환을 보여주는 다이어그램 프로세스 상태 다이어그램이라 한다.

//////////////////////////////////////////////////////////

// 프로세스 계층 구조 //////////////////////////////////////

// 프로세스는 실행 도중 시스템 호출을 통해 다른 프로세스를 생성할 수 있다.

// 이때 새 프로세스를 생성한 프로세스를 부모 프로세스라 하며, , 부모 프로세스로 인해 생성된 새로운 프로세스를 자식 프로세스라 한다.

// 자식 프로세스와 부모 프로세스는 서로 다른 PID를 가지는데, 자식 프로세스의 PCB에는 부모의 PID인 PPID가 기록되기도 한다.

// 많은 운영체제는 이처럼 프로세스가 프로세스를 낳는 계층적인 구조로써 프로세스들을 관리한다.

// ex) 사용자가 컴퓨터를 켜고 로그인 창을 통해 성공적으로 로그인해서 bash 셀(사용자 인터페이스)로 Vim이라는 문서 편집기 프로그램을 실행

// 1. 사용자가 컴퓨터를 켠 순간에 생성된 최초 프로세스는 로그인을 담당하는 프로세스를 자식 프로세스로 생성한다.
// 2. 로그인 프로세스는 사용자 인터페이스 프로세스를 자식 프로세스로 생성한다.
// 3. 사용자 인터페이스 프로세스는 Vim 프로세스를 생성한다.


// 최초의 프로세스 /////////////////////////////////////////

// 모든 프로세스의 가장 위에 있는 최초의 프로세스는 유닉스 운영체제에서는 init, 리눅스 운영체제에서는 systemd, macOS에서는 launchd라고 한다.

// 최초의 프로세스의 PID는 항상 1번이며, 모든 프로세스 최상단에 있는 부모 프로세스이다.


//////////////////////////////////////////////////////////

// 프로세스 생성 기법 ///////////////////////////////////////

// * 이하 내용은 윈도우 운영체제와는 관련이 없으나 수많은 운영체제의 핵심 개념이다.

// 부모 프로세스를 통해 생성된 자식 프로세스들은 복제와 옷 갈아입기를 통해 실행된다.

// 더 정확하게, 부모 프로세스는 fork를 통해 자신의 복사본을 자식 프로세스로 생성해내고, 만들어진 복사본(자식 프로세스)은 exec를 통해 자신의 메모리 공간을 다른 프로그램으로 교체한다.

// fork와 exec는 시스템 호출이다.

// - fork
//		- 자기 자신 프로세스의 복사본을 만드는 시스템 호출이다.
//		- 부모 프로세스의 자원들(메모리 내용, 열린 파일 목록 등)이 자식 프로세스에 상속된다.
//		- PID 값이나 저장된 메모리 위치는 다르다.
// - exec
//		- 자신의 메모리 공간을 새로운 프로그램으로 덮어쓰는 시스템 호출이다.
//		→ 새로운 프로그램으로 전환하여 실행하는 시스템 호출이다.
//		- 자식 프로세스는 exec 시스템 호출을 통해 새로운 프로그램으로 전환된다.
//		- exec를 호출하면 코드 영역과 데이터 영역의 내용이 실행할 프로그램 내용으로 바뀌고, 나머지 영역은 초기화된다.

// 부모가 자식 프로세스를 실행하며 프로세스 계층 구조를 이루는 과정은 fork와 exec가 반복되는 과정이라 볼 수 있다.

// 부모 프로세스가 자식 프로세스를 fork한 뒤에 부모 프로세스, 자식 프로세스 누구도 exec를 호출하지 않는 경우도 있는데, 이 경우 부모 프로세스와 자식 프로세스는 같은 코드를 병행하여 실행하는 프로세스가 된다.